{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/util.js","webpack:///./src/patterns/how-to-apply/buttons/apply.js","webpack:///./src/patterns/how-to-apply/how-to-apply--pgt.js","webpack:///./src/patterns/how-to-apply/pgt-data.js","webpack:///./src/how-to-apply--pgt.js"],"names":["s","matchFn","removePartials","elem","window","parameters","parameterString","parameter","Object","key","f","nonInteractionHit","children","screen","array","i","obj","ua","msie","parseInt","rv","edge","el","document","attributes","att","a","response","axios","gaEvent","e","dateTime","date","lastDigit","day","daySuffix","partialMatchFn","fullMatchFn","props","className","href","d","aria-label","setSelectionButtonQualification","setSelectionLinkQualification","setSelectionButtonRoute","setSelectionLinkRoute","setSelectionHeadingLocationOne","setSelectionButtonLocationOneDate","setSelectionLinkLocationOneDate","setSelectionHeadingLocationTwo","setSelectionButtonLocationTwoDate","setSelectionLinkLocationTwoDate","setSelectionButtonDate","setSelectionLinkDate","setSelectionLinkMethod","formattedDate","dateSpecificPrompt","selectedQualificationData","onClick","filterQualificationData","setProgressRoute","setProgressDate","setProgressMethod","setProgressQualification","selectedRouteData","filterRouteData","selectedDateData","filterDatesData","methodNav","setFurtherStepsPendingIndicator","methodLinks","methods","methodLink","text","m","link","apply","linkOptions","data","uniqueLocationDataArray","uniqueLocationData","options","locations","fd","headingVal","buttonVal","data-date-src","dateSrc","selectedDateValue","filterMethodsData","setFirstStep","formatDate","dateLink","locationDateLinks","Array","from","Set","heading","dateButtons","dateLinks","locationOptions","locationsAll","dateNav","lo","filteredData","uniqueLocations","dates","filterLocation","buttonOptions","dateLinksData","filteredDateData","q","buttonQuals","linkRoutes","setWindowPrompt","l","selectedRouteValue","b","sr","routeLinksData","filteredRouteData","routeLink","linkQuals","selectedQualificationValue","routeNames","qual","filteredQualData","entryPoints","useState","promptQualification","promptRoute","promptEntryPoint","furtherStepsPending","aria-hidden","qualificationQuestion","alternative","otherurl","modalRef","modalContentRef","getModal","getModalContent","useEffect","focusTrap","setFocusTrap","createFocusTrap","initialFocus","onDeactivate","clickOutsideDeactivates","disableBodyScroll","enableBodyScroll","setModalVisible","ref","HowToApply","config","PropTypes","element","object","timeout","test","navigator","howToApplyCTAs","howToApply","axiosRequest","url","howToApplyConfig","render"],"mappings":"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","file":"how-to-apply--pgt.js","sourcesContent":[" \t// install a JSONP callback for chunk loading\n \tfunction webpackJsonpCallback(data) {\n \t\tvar chunkIds = data[0];\n \t\tvar moreModules = data[1];\n \t\tvar executeModules = data[2];\n\n \t\t// add \"moreModules\" to the modules object,\n \t\t// then flag all \"chunkIds\" as loaded and fire callback\n \t\tvar moduleId, chunkId, i = 0, resolves = [];\n \t\tfor(;i < chunkIds.length; i++) {\n \t\t\tchunkId = chunkIds[i];\n \t\t\tif(Object.prototype.hasOwnProperty.call(installedChunks, chunkId) && installedChunks[chunkId]) {\n \t\t\t\tresolves.push(installedChunks[chunkId][0]);\n \t\t\t}\n \t\t\tinstalledChunks[chunkId] = 0;\n \t\t}\n \t\tfor(moduleId in moreModules) {\n \t\t\tif(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {\n \t\t\t\tmodules[moduleId] = moreModules[moduleId];\n \t\t\t}\n \t\t}\n \t\tif(parentJsonpFunction) parentJsonpFunction(data);\n\n \t\twhile(resolves.length) {\n \t\t\tresolves.shift()();\n \t\t}\n\n \t\t// add entry modules from loaded chunk to deferred list\n \t\tdeferredModules.push.apply(deferredModules, executeModules || []);\n\n \t\t// run deferred modules when all chunks ready\n \t\treturn checkDeferredModules();\n \t};\n \tfunction checkDeferredModules() {\n \t\tvar result;\n \t\tfor(var i = 0; i < deferredModules.length; i++) {\n \t\t\tvar deferredModule = deferredModules[i];\n \t\t\tvar fulfilled = true;\n \t\t\tfor(var j = 1; j < deferredModule.length; j++) {\n \t\t\t\tvar depId = deferredModule[j];\n \t\t\t\tif(installedChunks[depId] !== 0) fulfilled = false;\n \t\t\t}\n \t\t\tif(fulfilled) {\n \t\t\t\tdeferredModules.splice(i--, 1);\n \t\t\t\tresult = __webpack_require__(__webpack_require__.s = deferredModule[0]);\n \t\t\t}\n \t\t}\n\n \t\treturn result;\n \t}\n\n \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading chunks\n \t// undefined = chunk not loaded, null = chunk preloaded/prefetched\n \t// Promise = chunk loading, 0 = chunk loaded\n \tvar installedChunks = {\n \t\t8: 0\n \t};\n\n \tvar deferredModules = [];\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \tvar jsonpArray = window[\"webpackJsonp\"] = window[\"webpackJsonp\"] || [];\n \tvar oldJsonpFunction = jsonpArray.push.bind(jsonpArray);\n \tjsonpArray.push = webpackJsonpCallback;\n \tjsonpArray = jsonpArray.slice();\n \tfor(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);\n \tvar parentJsonpFunction = oldJsonpFunction;\n\n\n \t// add entry module to deferred list\n \tdeferredModules.push([238,1,0,4,3,2]);\n \t// run deferred modules when ready\n \treturn checkDeferredModules();\n","/**\n * Useful utility functions\n *\n * @module util\n * @author Web Development\n * @copyright City, University of London 2018-2020\n */\n\nimport axios from 'axios';\nimport React from 'react';\n\n/**\n * Turns string boolean into real boolean.\n *\n * @param {string} s - A string that may be 'true'.\n * @returns {boolean} True if 'true'.\n */\nexport function toBool(s) {\n    return s === 'true' ? true : false;\n}\n\nconst partialMatchFn = (m) => (s) => s.indexOf(m) < 0,\n    fullMatchFn = (m) => (s) => s !== m;\n\n/**\n * Remove a class name from an HTML element.\n *\n * @param {HTMLElement} elem - An HTML element.\n * @param {string} className - A string representing the class to remove.\n * @param {boolean} [removePartials] - If true, remove partially matching classes.\n */\nexport function removeClass(elem, className, removePartials) {\n    const matchFn = removePartials\n        ? partialMatchFn(className)\n        : fullMatchFn(className);\n    elem.className = elem.className\n        .split(/\\s+/)\n        .filter((s) => matchFn(s))\n        .join(' ');\n}\n\n/**\n * Detect whether reduced motion is enabled.\n *\n * If it is, you should shortcut animations, disable autoplay elements, avoid\n * smooth scrolling in favour of jump scrolling, etc.\n *\n * Currently unsupported by Chrome, but works in Safari and Firefox.\n *\n * @returns {boolean} Boolean indicating that the reduce motion media query matches.\n */\nexport function reduceMotion() {\n    const reducedMotionQuery = window.matchMedia(\n        '(prefers-reduced-motion: reduce)'\n    );\n    return reducedMotionQuery.matches ? true : false;\n}\n\n/**\n * Predicate testing whether an element is currently visible, as opposed to\n * displayed: none; or similar. Doesn't necessarily mean it's visible in the\n * window.\n *\n * @param {HTMLElement} elem - An HTML element.\n * @returns {boolean} - Is it visible?\n */\nexport function isVisible(elem) {\n    return elem.offsetHeight !== 0 && elem.offsetWidth !== 0 ? true : false;\n}\n\n/**\n * Predicate testing whether an element is positioned in the window.\n *\n *\n * @param {HTMLElement} elem - An HTML element.\n * @returns {boolean} - Is it onscreen?\n */\nexport function verticallyInWindow(elem) {\n    return elem.getBoundingClientRect().top >= 0 &&\n        elem.getBoundingClientRect().top <= window.innerHeight\n        ? true\n        : false;\n}\n\n/**\n * Turn a query string into an object.\n *\n * @param {string} parameterString - An HTML query string.\n * @returns {object} An object containing the parameters.\n */\nexport function parametersToObject(parameterString) {\n    const parameters = {};\n    parameterString\n        .substr(1)\n        .split('&')\n        .forEach((parameter) => {\n            const [k, v] = parameter.split('=');\n            parameters[k] = v;\n        });\n    return parameters;\n}\n\n/**\n * Turn an object into a query string.\n *\n * @param {object} parameterObj - An object containing the parameters and their values.\n * @returns {string} A string of the parameters.\n */\nexport function objectToParameters(parameterObj) {\n    if (Object.keys(parameterObj).length > 0) {\n        let parameters = '?';\n        for (const key in parameterObj) {\n            parameters.length !== 1 && (parameters += '&');\n            parameters += key + '=' + parameterObj[key];\n        }\n        return parameters;\n    } else {\n        return '';\n    }\n}\n\n/**\n * Track a Google Analytics event.\n *\n * @param {string} event - The event key for Tag Manager.\n * @param {string} eventCategory - The event category.\n * @param {string} eventAction - The event action.\n * @param {string} [eventLabel] - The event label.\n * @param {number} [eventValue] - The event value.\n * @param {boolean} [nonInteractionHit] - Does this count as interacting with the page?\n */\nexport function gaEvent(\n    event,\n    eventCategory,\n    eventAction,\n    eventLabel,\n    eventValue,\n    nonInteractionHit\n) {\n    window.dataLayer = window.dataLayer || [];\n    window.dataLayer.push({\n        event: event,\n        eventCategory: eventCategory,\n        eventAction: eventAction,\n        eventLabel: eventLabel,\n        eventValue: eventValue,\n        nonInteractionHit: nonInteractionHit,\n    });\n}\n\n/**\n * Append an array of elements to an element.\n *\n * @param {HTMLElement} elem - The parent element.\n * @param {HTMLElement[]} children - An array of elements to append to it.\n */\nexport function appendAll(elem, children) {\n    children.forEach((child) => elem.appendChild(child));\n}\n\n/**\n * Extract number from string, e.g. return '123' from string 'a1b2c3'.\n *\n * @param {string} string - String\n */\nexport function numberFromString(string) {\n    let number = string.replace(/\\D/g, '');\n    return number;\n}\n\n/**\n * Calculates viewport width to determinte if using mobile\n * @param {number} number - width of screen, with default value = 432.\n *\n */\nexport function isMobile(screen = 432) {\n    const viewPortWidth = window.innerWidth;\n    const mobileScreen = screen;\n\n    if (viewPortWidth < mobileScreen) {\n        return true;\n    }\n}\n\n/**\n *\n * Turn DOM elements to array e.g return [li, li, li] from DOM element selecting 'li' <ul><li></li><li></li><li></li></ul>\n *\n * @param {object} object - Object\n */\n\nexport function toArray(obj) {\n    let array = [];\n    // iterate backwards ensuring that length is an UInt32\n    for (let i = obj.length >>> 0; i--; ) {\n        array[i] = obj[i];\n    }\n    return array;\n}\n\n/**\n * Check browser user agent is IE or edge and return version number\n */\nexport function detectIE() {\n    const ua = window.navigator.userAgent,\n        versionLength = 10,\n        msie = ua.indexOf('MSIE '),\n        msieVersionOffset = 5;\n\n    if (msie > 0) {\n        // IE 10 or older => return version number\n        return parseInt(\n            ua.substring(msie + msieVersionOffset, ua.indexOf('.', msie)),\n            versionLength\n        );\n    }\n\n    const trident = ua.indexOf('Trident/'),\n        tridentVersionOffset = 3;\n\n    if (trident > 0) {\n        // IE 11 => return version number\n        let rv = ua.indexOf('rv:');\n        return parseInt(\n            ua.substring(rv + tridentVersionOffset, ua.indexOf('.', rv)),\n            versionLength\n        );\n    }\n\n    const edge = ua.indexOf('Edge/'),\n        edgeVersionOffset = 5;\n\n    if (edge > 0) {\n        // Edge (IE 12+) => return version number\n        return parseInt(\n            ua.substring(edge + edgeVersionOffset, ua.indexOf('.', edge)),\n            versionLength\n        );\n    }\n\n    // other browser\n    return false;\n}\n\n/**\n * Check if browser supports IntersectionObserver API\n *\n * @returns {Boolean} -\n */\nexport function checkIntersectionObserver() {\n    if (\n        'IntersectionObserver' in window &&\n        'IntersectionObserverEntry' in window &&\n        'intersectionRatio' in window.IntersectionObserverEntry.prototype\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Create elements containing classes, content and any other attributes\n *\n * @param {string} type - Type of element to create, e.g. \"div\", \"button\".\n * @param {array} attributes - Array of objects specifying which attributes to assign to the element i.e. {label : \"class\", val : \"container\"}\n */\nexport function createHTMLElement(type, attributes) {\n    let el = document.createElement(type);\n    attributes.map(function (att) {\n        att.label === 'content'\n            ? el.appendChild(document.createTextNode(att.val))\n            : att.label === 'html'\n            ? (el.innerHTML = att.val)\n            : el.setAttribute(att.label, att.val);\n    });\n    return el;\n}\n\nexport function uppercaseFirstLetterLowercaseRest(s) {\n    return s.charAt(0).toUpperCase() + s.slice(1).toLowerCase();\n}\n\n/**\n * Asynchronous request to Funnelback web service.\n *\n * @param {object} config An axios configuration object.\n * @return {Promise} - A promise of a Funnelback response.\n */\nexport function axiosRequest(config) {\n    const httpOK = 200;\n\n    return axios(config)\n        .then((response) => {\n            if (httpOK === response.status) {\n                return response.data;\n            } else {\n                throw `Bad response: ${response.status}`;\n            }\n        })\n        .catch((e) => {\n            if (!axios.isCancel(e)) {\n                gaEvent(\n                    'jsError',\n                    'JavaScript error',\n                    `Line ${e.lineNumber} – ${e.message}`,\n                    `axiosRequest ${e.fileName} (${window.location})`,\n                    true\n                );\n            }\n        });\n}\n\n/**\n * Returns the correct English suffix for a number.\n *\n * @param  {number} day - The day of the month.\n * @returns {string} The correct suffix.\n */\nfunction daySuffix(day) {\n    const eleventh = 11,\n        thirteenth = 13,\n        lastDigit = day.toString().slice(-1);\n\n    return day >= eleventh || day <= thirteenth\n        ? 'th'\n        : lastDigit === '1'\n        ? 'st'\n        : lastDigit === '2'\n        ? 'nd'\n        : lastDigit === '3'\n        ? 'rd'\n        : 'th';\n}\n\n/**\n * Format a date for React.\n *\n * @param {Date} date - A date object.\n * @returns {ReactFragment} The formatted date.\n */\nexport function formatReactDate(date) {\n    const months = [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December',\n        ],\n        days = [\n            'Sunday',\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday',\n        ];\n\n    return (\n        <time dateTime={date.toISOString().split('T')[0]}>\n            {days[date.getUTCDay()]}, {date.getUTCDate()}\n            <sup>{daySuffix(date.getUTCDate())}</sup>{' '}\n            {months[date.getUTCMonth()]} {date.getUTCFullYear()}\n        </time>\n    );\n}\n\n/**\n * Array slicer\n *\n * @param {array} arr - array to be split up into subarrays\n * @param {number} len - max number items that goes into each subarray\n */\nexport function arraySlicer(arr, len) {\n    let newArray = [],\n        i = 0,\n        n = arr.length;\n\n    while (i < n) {\n        newArray.push(arr.slice(i, (i += len)));\n    }\n    return newArray;\n}\n","import React from 'react';\n\nexport default function ApplyLinks(props) {\n    if (props.data) {\n        return props.data.map((d, index) => {\n            return (\n                <li key={index} className=\"apply\">\n                    <a href={d['link']}>\n                        {/* <span>{props.btnText ? props.btnText : d.header}</span> */}\n                        <span>{d.text}</span>\n                        &nbsp;\n                        <span\n                            className=\"far fa-external-link\"\n                            aria-label=\"(external link)\"\n                        />\n                    </a>\n                </li>\n            );\n        });\n    }\n}\n","/**\n * How to apply for postgraduate taught degrees\n *\n * Don't run this via patterns.js, it's a separate compilation.\n *\n * @module patterns/how-to-apply/how-to-apply--pgt\n * @author Web Development\n * @copyright City, University of London 2020\n */\n\nimport React, { useEffect, useState } from 'react';\nimport { disableBodyScroll, enableBodyScroll } from 'body-scroll-lock';\n\nimport ApplyLinks from './buttons/apply';\nimport PropTypes from 'prop-types';\nimport createFocusTrap from 'focus-trap';\n\n/**\n * Launch the How to apply modal.\n *\n * @param {object} props The JSON configuration file for the modal.\n * @return {object} The React component to render.\n */\nfunction HowToApply(props) {\n    let entryPoints = props.config;\n    const [modalVisible, setModalVisible] = useState(false),\n        [firstStep, setFirstStep] = useState(false), // Controls 'Start again' visibility\n        [progressQualification, setProgressQualification] = useState(),\n        [progressRoute, setProgressRoute] = useState(),\n        [progressDate, setProgressDate] = useState(),\n        [progressMethod, setProgressMethod] = useState(),\n        [\n            furtherStepsPendingIndicator,\n            setFurtherStepsPendingIndicator,\n        ] = useState(),\n        [windowPrompt, setWindowPrompt] = useState(\n            'Choose the qualification you wish to apply for:'\n        ),\n        promptQualification = 'Choose the qualification you wish to apply for:',\n        promptRoute = 'Choose the route you wish to apply for:',\n        promptEntryPoint = 'Choose the entry point you wish to apply for:',\n        furtherStepsPending = (\n            <li className=\"how-to-apply--pgt--js__modal__progress__next\">\n                <span className=\"how-to-apply--pgt--js__modal__progress__wrapper\">\n                    <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                        <span\n                            className=\"fas fa-circle icon\"\n                            aria-hidden=\"true\"\n                        ></span>\n                    </span>\n                </span>\n            </li>\n        );\n\n    let [\n            selectionButtonQualification,\n            setSelectionButtonQualification,\n        ] = useState(),\n        [\n            selectionLinkQualification,\n            setSelectionLinkQualification,\n        ] = useState(),\n        [selectionButtonRoute, setSelectionButtonRoute] = useState(),\n        [selectionLinkRoute, setSelectionLinkRoute] = useState(),\n        [selectionButtonDate, setSelectionButtonDate] = useState(),\n        [selectionLinkDate, setSelectionLinkDate] = useState(),\n        [\n            selectionHeadingLocationOne,\n            setSelectionHeadingLocationOne,\n        ] = useState(),\n        [\n            selectionButtonLocationOneDate,\n            setSelectionButtonLocationOneDate,\n        ] = useState(false),\n        [\n            selectionLinkLocationOneDate,\n            setSelectionLinkLocationOneDate,\n        ] = useState(false),\n        [\n            selectionHeadingLocationTwo,\n            setSelectionHeadingLocationTwo,\n        ] = useState(),\n        [\n            selectionButtonLocationTwoDate,\n            setSelectionButtonLocationTwoDate,\n        ] = useState(false),\n        [\n            selectionLinkLocationTwoDate,\n            setSelectionLinkLocationTwoDate,\n        ] = useState(false),\n        [selectionLinkMethod, setSelectionLinkMethod] = useState(),\n        selectedQualificationData,\n        selectedQualificationValue,\n        selectedRouteData,\n        selectedRouteValue,\n        selectedDateData,\n        selectedDateValue;\n\n    /**\n     * Clear any previously rendered selection buttons/links from the state to prevent superfluous button/link rendering\n     */\n    function clearSelectionOptions() {\n        setSelectionButtonQualification();\n        setSelectionLinkQualification();\n        setSelectionButtonRoute();\n        setSelectionLinkRoute();\n        setSelectionHeadingLocationOne();\n        setSelectionButtonLocationOneDate();\n        setSelectionLinkLocationOneDate();\n        setSelectionHeadingLocationTwo();\n        setSelectionButtonLocationTwoDate();\n        setSelectionLinkLocationTwoDate();\n        setSelectionButtonDate();\n        setSelectionLinkDate();\n        setSelectionLinkMethod();\n    }\n\n    /**\n     * Convert raw date values to full month/year for rendering to buttons.\n     *\n     * @param {string} sourceDate The unformatted date string.\n     */\n    function formatDate(sourceDate) {\n        const months = [\n            'January',\n            'February',\n            'March',\n            'April',\n            'May',\n            'June',\n            'July',\n            'August',\n            'September',\n            'October',\n            'November',\n            'December',\n        ];\n        let formattedDate = new Date(sourceDate);\n        return `${\n            months[formattedDate.getUTCMonth()]\n        } ${formattedDate.getUTCFullYear()}`;\n    }\n\n    /**\n     * Completed programme, route and dates filter. Analyse methods data.\n     *\n     * @param {object} data The filtered data record data, where methods are at the top level.\n     */\n    function filterMethodsData(methods, dateSpecificPrompt) {\n        // Methods of study pre-selection prompt text. If one date exist, this will display in the prompt text; if multiple dates these will render as buttons\n        dateSpecificPrompt ? setWindowPrompt(dateSpecificPrompt) : null;\n\n        // Clear any previously rendered selection buttons/links from the state to prevent superfluous button/link rendering\n        clearSelectionOptions();\n\n        // Variables scoped to this function\n        let qualNav, routeNav, dateNav, methodNav;\n\n        selectedQualificationData\n            ? (qualNav = (\n                  <li className=\"how-to-apply--pgt--js__modal__progress__previous\">\n                      <button\n                          className=\"how-to-apply--pgt--js__modal__progress__wrapper\"\n                          onClick={() => {\n                              // Load qualification select; clear route, date and method from progress navigation\n                              filterQualificationData(entryPoints);\n                              setProgressRoute();\n                              setProgressDate();\n                              setProgressMethod();\n                          }}\n                      >\n                          <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                              <span\n                                  className=\"fas fa-check icon\"\n                                  aria-label=\"Back to choose qualification\"\n                              ></span>\n                          </span>\n                          <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                              Qualification\n                          </span>\n                      </button>\n                  </li>\n              ))\n            : (qualNav = null);\n        setProgressQualification(qualNav);\n\n        selectedRouteData\n            ? (routeNav = (\n                  <li className=\"how-to-apply--pgt--js__modal__progress__previous\">\n                      <button\n                          className=\"how-to-apply--pgt--js__modal__progress__wrapper\"\n                          onClick={() => {\n                              // Load route select; clear date and method from progress navigation\n                              setProgressDate();\n                              setProgressMethod();\n                              if (selectedQualificationData) {\n                                  filterRouteData(\n                                      selectedQualificationData[0]['options']\n                                  );\n                              } else {\n                                  filterQualificationData(entryPoints);\n                              }\n                          }}\n                      >\n                          <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                              <span\n                                  className=\"fas fa-check icon\"\n                                  aria-label=\"Back to choose route\"\n                              ></span>\n                          </span>\n                          <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                              Route\n                          </span>\n                      </button>\n                  </li>\n              ))\n            : (routeNav = null);\n        setProgressRoute(routeNav);\n\n        selectedDateData\n            ? (dateNav = (\n                  <li className=\"how-to-apply--pgt--js__modal__progress__previous\">\n                      <button\n                          className=\"how-to-apply--pgt--js__modal__progress__wrapper\"\n                          onClick={() => {\n                              // Load date select; clear method from progress navigation\n                              setProgressMethod();\n                              if (selectedRouteData) {\n                                  filterDatesData(\n                                      selectedRouteData[0]['options']\n                                  );\n                              } else if (selectedQualificationData) {\n                                  filterRouteData(\n                                      selectedQualificationData[0]['options']\n                                  );\n                              } else {\n                                  filterQualificationData(entryPoints);\n                              }\n                          }}\n                      >\n                          <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                              <span\n                                  className=\"fas fa-check icon\"\n                                  aria-label=\"Back to choose route\"\n                              ></span>\n                          </span>\n                          <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                              Entry point\n                          </span>\n                      </button>\n                  </li>\n              ))\n            : (dateNav = null);\n        setProgressDate(dateNav);\n\n        // Method loads apply links and, if present, will always be the last step, therefore progress icon does nothing on click\n        methodNav = (\n            <li className=\"how-to-apply--pgt--js__modal__progress__current\">\n                <span className=\"how-to-apply--pgt--js__modal__progress__wrapper\">\n                    <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                        <span className=\"fas fa-circle icon\"></span>\n                    </span>\n                    <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                        Method of study\n                    </span>\n                </span>\n            </li>\n        );\n        setProgressMethod(methodNav);\n\n        // Final modal step; remove further steps pending indicator\n        setFurtherStepsPendingIndicator();\n\n        let methodLinks = [];\n        let linkOptions;\n\n        methods.map((m) => {\n            const methodLink = {\n                text: m.header,\n                link: m.options.apply,\n            };\n            methodLinks.push(methodLink);\n            linkOptions = <ApplyLinks data={methodLinks} />;\n            setSelectionLinkMethod(linkOptions);\n        });\n    }\n\n    function filterLocation(data, location, heading) {\n        let uniqueLocationDataArray = [];\n        data.map((d) => {\n            let uniqueLocationData = {\n                ...d,\n                options: d.options.filter((e) => e.header === location),\n            };\n            uniqueLocationDataArray.push(uniqueLocationData);\n        });\n\n        // Gather location information for header\n        let locations = [];\n        uniqueLocationDataArray.map((fd) => {\n            fd['options'][0]\n                ? locations.push(fd['options'][0]['header'])\n                : null;\n        });\n\n        // Remove duplicate locations\n        locations = locations.filter((v, i, a) => a.indexOf(v) === i);\n\n        // Create heading\n        let headingVal = locations.map((l) => <h3 key={l}>{l}</h3>);\n\n        // Create buttons\n        let buttonVal = uniqueLocationDataArray.map((fd) => {\n            if (fd['options'].length > 0) {\n                if (fd['options'][0]['options'].length > 1) {\n                    return (\n                        <li key={fd}>\n                            <button>\n                                <span\n                                    data-date-src={fd['header']}\n                                    onClick={(e) => {\n                                        let dateSrc = e.target.getAttribute(\n                                            'data-date-src'\n                                        );\n                                        selectedDateValue = formatDate(dateSrc);\n                                        selectedDateData = data.filter(\n                                            (fd) => fd.header === dateSrc\n                                        );\n                                        filterMethodsData(\n                                            selectedDateData[0]['options'][0][\n                                                'options'\n                                            ],\n                                            'Apply online now:'\n                                        );\n                                        setFirstStep(false);\n                                    }}\n                                >\n                                    {formatDate(fd['header'])}\n                                </span>\n                            </button>\n                        </li>\n                    );\n                } else {\n                    const dateLink = {\n                        text: formatDate(fd.header),\n                        link:\n                            fd['options'][0]['options'][0]['options']['apply'],\n                    };\n                    let locationDateLinks = [];\n                    locationDateLinks.push(dateLink);\n                    locationDateLinks = Array.from(\n                        new Set(locationDateLinks.map((a) => a.text))\n                    ).map((text) => {\n                        return locationDateLinks.find((a) => a.text === text);\n                    });\n                    return <ApplyLinks data={locationDateLinks} />;\n                }\n            }\n        });\n\n        uniqueLocationDataArray.map(() => {\n            if (heading === '#location-1') {\n                setSelectionHeadingLocationOne(headingVal);\n                setSelectionButtonLocationOneDate(buttonVal);\n            } else if (heading === '#location-2') {\n                setSelectionHeadingLocationTwo(headingVal);\n                setSelectionButtonLocationTwoDate(buttonVal);\n            }\n        });\n    }\n\n    /**\n     * Completed programme and route filter. Analyse dates data.\n     *\n     * @param {object} data The filtered data record data, where dates are at the top level.\n     */\n    function filterDatesData(data) {\n        // Date pre-selection prompt text\n        setWindowPrompt(promptEntryPoint);\n\n        // data.length === 1 ? setPromptMethod('single') : setPromptMethod('multiple');\n        // setDatesData(data[0]['header']);\n\n        // Clear any previously rendered selection buttons/links from the state to prevent superfluous button/link rendering\n        clearSelectionOptions();\n\n        // Empty relevant state variables to remove superfluous progress navigation rendering\n        setProgressMethod();\n\n        // Clear data stored from previous selections\n        selectedDateData = null;\n\n        // Variables scoped to this function\n        let buttonOptions,\n            linkOptions,\n            dateButtons = [],\n            dateLinks = [],\n            locationOptions = [],\n            locationsAll = [],\n            qualNav,\n            routeNav,\n            dateNav,\n            dateLink;\n\n        // Progress indicator; display selected qualification and route values\n        selectedQualificationData\n            ? (qualNav = (\n                  <li className=\"how-to-apply--pgt--js__modal__progress__previous\">\n                      <button\n                          className=\"how-to-apply--pgt--js__modal__progress__wrapper\"\n                          onClick={() => {\n                              filterQualificationData(entryPoints);\n                          }}\n                      >\n                          <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                              <span\n                                  className=\"fas fa-check icon\"\n                                  aria-label=\"Back to choose qualification\"\n                              ></span>\n                          </span>\n                          <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                              Qualification\n                          </span>\n                      </button>\n                  </li>\n              ))\n            : (qualNav = null);\n        setProgressQualification(qualNav);\n\n        selectedRouteData\n            ? (routeNav = (\n                  <li className=\"how-to-apply--pgt--js__modal__progress__previous\">\n                      <button\n                          className=\"how-to-apply--pgt--js__modal__progress__wrapper\"\n                          onClick={() => {\n                              filterRouteData(\n                                  selectedQualificationData[0]['options']\n                              );\n                          }}\n                      >\n                          <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                              <span\n                                  className=\"fas fa-check icon\"\n                                  aria-label=\"Back to choose route\"\n                              ></span>\n                          </span>\n                          <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                              Route\n                          </span>\n                      </button>\n                  </li>\n              ))\n            : (routeNav = null);\n        setProgressRoute(routeNav);\n\n        // Method loads apply links and, if present, will always be the last step, therefore progress icon does nothing on click\n        if (selectedDateData) {\n            dateNav = (\n                <li className=\"how-to-apply--pgt--js__modal__progress__current\">\n                    <span className=\"how-to-apply--pgt--js__modal__progress__wrapper\">\n                        <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                            <span className=\"fas fa-circle icon\"></span>\n                        </span>\n                        <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                            Entry point\n                        </span>\n                    </span>\n                </li>\n            );\n        } else {\n            dateNav = null;\n        }\n\n        setProgressDate(dateNav);\n\n        data.map((d) => {\n            let locations = d['options'];\n            locations.map((l) => {\n                let methods = l['options'];\n                methods.map(() => {\n                    // Multiple dates; print buttons\n                    if (data.length > 1 || data[0]['options'].length > 1) {\n                        // Date selection required: set progress indicator to route and remove methods\n                        selectedDateValue = (\n                            <li className=\"how-to-apply--pgt--js__modal__progress__current\">\n                                <span className=\"how-to-apply--pgt--js__modal__progress__wrapper\">\n                                    <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                                        <span className=\"fas fa-circle icon\"></span>\n                                    </span>\n                                    <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                                        Entry point\n                                    </span>\n                                </span>\n                            </li>\n                        );\n                        setProgressDate(selectedDateValue);\n                        setProgressMethod();\n\n                        // Calculate number of locations\n                        locations.map((lo) => {\n                            locationOptions.push(lo.header);\n                        });\n                        locationOptions = locationOptions.reduce(function (\n                            a,\n                            i\n                        ) {\n                            a.indexOf(i) === -1 ? a.push(i) : null;\n                            return a;\n                        },\n                        []);\n\n                        // Multiple locations, multiple dates => create array of objects per location\n                        if (locationOptions.length > 1) {\n                            locationOptions.map((lo) => {\n                                let filteredData = data.filter(\n                                    (fd) => fd['options'][0]['header'] === lo\n                                );\n                                locationsAll.push(filteredData);\n                            });\n\n                            let uniqueLocations = [];\n                            data.map((d) => {\n                                let dates = d['options'];\n                                dates.map((date) => {\n                                    uniqueLocations.push(date.header);\n                                });\n                            });\n\n                            // Remove duplicate locations\n                            uniqueLocations = uniqueLocations.filter(\n                                (v, i, a) => a.indexOf(v) === i\n                            );\n\n                            for (let i = 1; i <= uniqueLocations.length; i++) {\n                                filterLocation(\n                                    data,\n                                    uniqueLocations[i - 1],\n                                    `#location-${i}`,\n                                    `#location-${i}__buttons`\n                                );\n                            }\n                            // End multiple locations\n                        } else {\n                            // Single location, multiple dates\n                            if (locations.length > 1 || methods.length > 1) {\n                                // Single location, multiple dates, multiple methods => Dates as standard button; further options to follow\n                                dateButtons.push(d.header);\n                                dateButtons = dateButtons.reduce(function (\n                                    a,\n                                    i\n                                ) {\n                                    a.indexOf(i) === -1 ? a.push(i) : null;\n                                    return a;\n                                },\n                                []);\n                                buttonOptions = dateButtons.map((db) => {\n                                    return (\n                                        <li key={db}>\n                                            <button>\n                                                <span\n                                                    data-date-src={db}\n                                                    onClick={(e) => {\n                                                        let dateSrc = e.target.getAttribute(\n                                                            'data-date-src'\n                                                        );\n                                                        selectedDateValue = formatDate(\n                                                            dateSrc\n                                                        );\n                                                        selectedDateData = data.filter(\n                                                            (fd) =>\n                                                                fd.header ===\n                                                                dateSrc\n                                                        );\n                                                        filterMethodsData(\n                                                            selectedDateData[0][\n                                                                'options'\n                                                            ][0]['options'],\n                                                            'Apply now for ' +\n                                                                formatDate(\n                                                                    selectedDateData[0][\n                                                                        'header'\n                                                                    ]\n                                                                ) +\n                                                                ' entry:'\n                                                        );\n                                                        setFirstStep(false);\n                                                    }}\n                                                >\n                                                    {formatDate(db)}\n                                                </span>\n                                            </button>\n                                        </li>\n                                    );\n                                });\n\n                                // Modal journey incomplete; display further steps pending indicator\n                                setFurtherStepsPendingIndicator(\n                                    furtherStepsPending\n                                );\n                            } else {\n                                // Single location, multiple dates, single method => Dates as links\n                                dateLinks.push(d.header);\n                                dateLinks = dateLinks.reduce(function (a, i) {\n                                    a.indexOf(i) === -1 ? a.push(i) : null;\n                                    return a;\n                                }, []);\n\n                                // Map each unique date and filter data to extract correct apply links\n                                const dateLinksData = [];\n                                dateLinks.map((lq) => {\n                                    let filteredDateData = data.filter(\n                                        (q) => q.header === lq\n                                    );\n                                    dateLink = {\n                                        text: formatDate(lq),\n                                        link:\n                                            filteredDateData[0]['options'][0][\n                                                'options'\n                                            ][0]['options']['apply'],\n                                    };\n                                    dateLinksData.push(dateLink);\n                                });\n                                linkOptions = (\n                                    <ApplyLinks data={dateLinksData} />\n                                );\n                                // Final modal step; remove further steps indicator\n                                setFurtherStepsPendingIndicator();\n                            }\n                        }\n                    } else {\n                        // Single date; pass date value to methods function\n                        filterMethodsData(\n                            data[0]['options'][0]['options'],\n                            'Apply for ' +\n                                formatDate(data[0]['header']) +\n                                ' entry:'\n                        );\n                    }\n                });\n            });\n        });\n\n        linkOptions ? setSelectionLinkDate(linkOptions) : null;\n        buttonOptions ? setSelectionButtonDate(buttonOptions) : null;\n    }\n\n    /**\n     * Completed programme filter. Analyse routes data.\n     *\n     * @param {object} data The filtered data record data, where routes are at the top level.\n     */\n    function filterRouteData(data) {\n        // Clear any previously rendered selection buttons/links from the state to prevent superfluous button/link rendering\n        clearSelectionOptions();\n\n        // Empty relevant state variables to remove superfluous progress navigation rendering\n        setProgressDate();\n        setProgressMethod();\n\n        // Clear data stored from previous selections\n        selectedRouteData = null;\n        selectedDateData = null;\n\n        // Variables scoped to this function\n        let buttonQuals = [],\n            linkRoutes = [],\n            routeLink,\n            buttonOptions,\n            linkOptions,\n            locationOptions = [],\n            qualNav;\n\n        // Progress indicator; display selected qualification value\n        selectedQualificationData\n            ? (qualNav = (\n                  <li className=\"how-to-apply--pgt--js__modal__progress__previous\">\n                      <button\n                          className=\"how-to-apply--pgt--js__modal__progress__wrapper\"\n                          onClick={() => {\n                              filterQualificationData(entryPoints);\n                          }}\n                      >\n                          <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                              <span\n                                  className=\"fas fa-check icon\"\n                                  aria-label=\"Back to choose qualification\"\n                              ></span>\n                          </span>\n                          <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                              Qualification\n                          </span>\n                      </button>\n                  </li>\n              ))\n            : (qualNav = null);\n        setProgressQualification(qualNav);\n\n        data.map((s) => {\n            // Routes pre-selection prompt text\n            setWindowPrompt(promptRoute);\n            let dates = s['options'];\n            dates.map((d) => {\n                let locations = d['options'];\n                locations.map((l) => {\n                    let methods = l['options'];\n                    methods.map(() => {\n                        // Store each unique location value in an array\n                        locations.map((lo) => {\n                            locationOptions.push(lo.header);\n                        });\n                        locationOptions = locationOptions.reduce(function (\n                            a,\n                            i\n                        ) {\n                            a.indexOf(i) === -1 ? a.push(i) : null;\n                            return a;\n                        },\n                        []);\n                        if (data.length > 1) {\n                            // Route selection required: set progress indicator to route and remove dates/methods\n                            selectedRouteValue = (\n                                <li className=\"how-to-apply--pgt--js__modal__progress__current\">\n                                    <span className=\"how-to-apply--pgt--js__modal__progress__wrapper\">\n                                        <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                                            <span className=\"fas fa-circle icon\"></span>\n                                        </span>\n                                        <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                                            Route\n                                        </span>\n                                    </span>\n                                </li>\n                            );\n                            setProgressRoute(selectedRouteValue);\n                            setProgressDate();\n                            setProgressMethod();\n\n                            if (\n                                dates.length > 1 ||\n                                locationOptions.length > 1 ||\n                                methods.length > 1\n                            ) {\n                                // Standard route button\n                                buttonQuals.push(s.header);\n                                buttonQuals = buttonQuals.reduce(function (\n                                    a,\n                                    i\n                                ) {\n                                    a.indexOf(i) === -1 ? a.push(i) : null;\n                                    return a;\n                                },\n                                []);\n                                buttonOptions = buttonQuals.map((bq) => {\n                                    return (\n                                        <li key={bq}>\n                                            <button>\n                                                <span\n                                                    onClick={(e) => {\n                                                        selectedRouteValue =\n                                                            e.target\n                                                                .textContent;\n                                                        selectedRouteData = data.filter(\n                                                            (sr) =>\n                                                                sr.header ===\n                                                                selectedRouteValue\n                                                        );\n                                                        filterDatesData(\n                                                            selectedRouteData[0][\n                                                                'options'\n                                                            ]\n                                                        );\n                                                        setFirstStep(false);\n                                                    }}\n                                                >\n                                                    {bq}\n                                                </span>\n                                            </button>\n                                        </li>\n                                    );\n                                });\n                                // Modal journey incomplete; display further steps pending indicator\n                                setFurtherStepsPendingIndicator(\n                                    furtherStepsPending\n                                );\n                            } else {\n                                // Route as link\n                                linkRoutes.push(s.header);\n                                linkRoutes = linkRoutes.reduce(function (a, i) {\n                                    a.indexOf(i) === -1 ? a.push(i) : null;\n                                    return a;\n                                }, []);\n\n                                // Map each unique route and filter data to extract correct apply links\n                                const routeLinksData = [];\n                                linkRoutes.map((lr) => {\n                                    let filteredRouteData = data.filter(\n                                        (q) => q.header === lr\n                                    );\n                                    routeLink = {\n                                        text: lr,\n                                        link:\n                                            filteredRouteData[0]['options'][0][\n                                                'options'\n                                            ][0]['options'][0]['options'][\n                                                'apply'\n                                            ],\n                                    };\n                                    routeLinksData.push(routeLink);\n                                });\n                                linkOptions = (\n                                    <ApplyLinks data={routeLinksData} />\n                                );\n                                // Final modal step; remove further steps indicator\n                                setFurtherStepsPendingIndicator();\n                            }\n                        } else {\n                            // Move to dates function\n                            filterDatesData(data[0]['options']);\n                        }\n                    });\n                });\n            });\n        });\n\n        // If route options and/or links exist, update state to render relevant JSX\n        buttonOptions ? setSelectionButtonRoute(buttonOptions) : null;\n        linkOptions ? setSelectionLinkRoute(linkOptions) : null;\n    }\n\n    /**\n     * Analyse programme data record data.\n     *\n     * @param {object} data The original data record data, where programmes are at the top level.\n     */\n    function filterQualificationData(data) {\n        // If qualification select exists, it will be the first step in the modal; disable 'Start again' option\n        setFirstStep(true);\n\n        // Qualification pre-selection prompt text\n        setWindowPrompt(promptQualification);\n\n        // Clear any previously rendered selection buttons/links from the state to prevent superfluous button/link rendering\n        clearSelectionOptions();\n\n        // Empty relevant state variables to remove superfluous progress navigation rendering\n        setProgressRoute();\n        setProgressDate();\n        setProgressMethod();\n\n        // Clear data stored from previous selections\n        selectedQualificationData = null;\n        selectedRouteData = null;\n        selectedDateData = null;\n\n        // Variables scoped to this function\n        let buttonQuals = [],\n            linkQuals = [],\n            buttonOptions,\n            linkOptions,\n            locationOptions = [];\n\n        if (data.length > 1) {\n            // Qualification selection required: set progress indicator to qualification and remove routes/dates/methods\n            selectedQualificationValue = (\n                <li className=\"how-to-apply--pgt--js__modal__progress__current\">\n                    <span className=\"how-to-apply--pgt--js__modal__progress__wrapper\">\n                        <span className=\"how-to-apply--pgt--js__modal__progress__circle\">\n                            <span className=\"fas fa-circle icon\"></span>\n                        </span>\n                        <span className=\"how-to-apply--pgt--js__modal__progress__text\">\n                            Qualification\n                        </span>\n                    </span>\n                </li>\n            );\n            setProgressQualification(selectedQualificationValue);\n        }\n\n        data.length > 1\n            ? data.map((e) => {\n                  let routeNames = e['options'];\n                  routeNames.map((s) => {\n                      let dates = s['options'];\n                      dates.map((d) => {\n                          let locations = d['options'];\n                          locations.map((l) => {\n                              let methods = l['options'];\n                              methods.map(() => {\n                                  // Store each unique location value in an array\n                                  locations.map((lo) => {\n                                      locationOptions.push(lo.header);\n                                  });\n                                  locationOptions = locationOptions.reduce(\n                                      function (a, i) {\n                                          a.indexOf(i) === -1\n                                              ? a.push(i)\n                                              : null;\n                                          return a;\n                                      },\n                                      []\n                                  );\n                                  if (data.length > 1) {\n                                      if (\n                                          routeNames.length > 1 ||\n                                          dates.length > 1 ||\n                                          locationOptions.length > 1 ||\n                                          methods.length > 1\n                                      ) {\n                                          buttonQuals.push(e.header);\n                                          buttonQuals = buttonQuals.reduce(\n                                              function (a, i) {\n                                                  a.indexOf(i) === -1\n                                                      ? a.push(i)\n                                                      : null;\n                                                  return a;\n                                              },\n                                              []\n                                          );\n                                          buttonOptions = buttonQuals.map(\n                                              (bq) => {\n                                                  return (\n                                                      <li key={bq}>\n                                                          <button>\n                                                              <span\n                                                                  onClick={(\n                                                                      e\n                                                                  ) => {\n                                                                      selectedQualificationValue =\n                                                                          e\n                                                                              .target\n                                                                              .innerText;\n                                                                      selectedQualificationData = data.filter(\n                                                                          (\n                                                                              qual\n                                                                          ) =>\n                                                                              qual.header ===\n                                                                              selectedQualificationValue\n                                                                      );\n                                                                      filterRouteData(\n                                                                          selectedQualificationData[0][\n                                                                              'options'\n                                                                          ]\n                                                                      );\n                                                                      setFirstStep(\n                                                                          false\n                                                                      );\n                                                                  }}\n                                                              >\n                                                                  {bq}\n                                                              </span>\n                                                          </button>\n                                                      </li>\n                                                  );\n                                              }\n                                          );\n                                          // Modal journey incomplete; display further steps pending indicator\n                                          setFurtherStepsPendingIndicator(\n                                              furtherStepsPending\n                                          );\n                                      } else {\n                                          linkQuals.push(e.header);\n                                          linkQuals = linkQuals.reduce(\n                                              function (a, i) {\n                                                  a.indexOf(i) === -1\n                                                      ? a.push(i)\n                                                      : null;\n                                                  return a;\n                                              },\n                                              []\n                                          );\n\n                                          // Map each unique qualification and filter data to extract correct apply links\n                                          const methodLinks = [];\n                                          linkQuals.map((lq) => {\n                                              let filteredQualData = data.filter(\n                                                  (q) => q.header === lq\n                                              );\n                                              const methodLink = {\n                                                  text: lq,\n                                                  link:\n                                                      filteredQualData[0][\n                                                          'options'\n                                                      ][0]['options'][0][\n                                                          'options'\n                                                      ][0]['options'][0][\n                                                          'options'\n                                                      ]['apply'],\n                                              };\n                                              methodLinks.push(methodLink);\n                                          });\n                                          linkOptions = (\n                                              <ApplyLinks data={methodLinks} />\n                                          );\n                                          // Move to end of function and use qualification variable? Similar approach to ternary operator used at end of dates function\n                                      }\n                                  }\n                              });\n                          });\n                      });\n                  });\n              })\n            : // One qualification; move to routes function\n              filterRouteData(entryPoints[0]['options']);\n\n        buttonOptions ? setSelectionButtonQualification(buttonOptions) : null;\n        linkOptions ? setSelectionLinkQualification(linkOptions) : null;\n    }\n\n    // Modal wrapper render\n    const question = 'qualification',\n        qualificationQuestion = question === 'qualification' && (\n            <>\n                <div className=\"how-to-apply--pgt--js__modal__content-wrapper\">\n                    <p>{windowPrompt}</p>\n                    {/* Different JSX needed when multiple locations present */}\n                    {!(\n                        selectionHeadingLocationOne ||\n                        selectionButtonLocationOneDate ||\n                        selectionLinkLocationOneDate ||\n                        selectionHeadingLocationTwo ||\n                        selectionButtonLocationTwoDate ||\n                        selectionLinkLocationTwoDate\n                    ) ? (\n                        <ul className=\"how-to-apply--pgt--js__options\">\n                            {selectionButtonQualification}\n                            {selectionLinkQualification}\n                            {selectionButtonRoute}\n                            {selectionLinkRoute}\n                            {selectionButtonDate}\n                            {selectionLinkDate}\n                            {selectionLinkMethod}\n                        </ul>\n                    ) : (\n                        <React.Fragment>\n                            {selectionHeadingLocationOne}\n                            <ul className=\"how-to-apply--pgt--js__options how-to-apply--pgt--js__options--multiple-locations\">\n                                {selectionButtonLocationOneDate}\n                                {selectionLinkLocationOneDate}\n                            </ul>\n                            {selectionHeadingLocationTwo}\n                            <ul className=\"how-to-apply--pgt--js__options how-to-apply--pgt--js__options--multiple-locations\">\n                                {selectionButtonLocationTwoDate}\n                                {selectionLinkLocationTwoDate}\n                            </ul>\n                        </React.Fragment>\n                    )}\n                </div>\n            </>\n        ),\n        alternative = props.element.dataset.otheryear &&\n            props.element.dataset.otherurl && (\n                <p className=\"how-to-apply--pgt--js__modal__alternative\">\n                    <a href={props.element.dataset.otherurl}>\n                        {props.element.dataset.otheryear} entry is also\n                        available.\n                    </a>\n                </p>\n            );\n    // End modal wrapper render\n\n    // Focus trap\n    const [focusTrap, setFocusTrap] = useState({});\n\n    let modalRef = null,\n        modalContentRef = null;\n    const getModal = () => modalRef,\n        getModalContent = () => modalContentRef;\n\n    useEffect(() => {\n        if (!focusTrap.activate) {\n            setFocusTrap(\n                createFocusTrap(getModalContent(), {\n                    initialFocus: getModalContent().querySelector(\n                        '.how-to-apply--pgt--js__options button, .how-to-apply--pgt--js__options a'\n                    ),\n                    onDeactivate: () => setModalVisible(false),\n                    clickOutsideDeactivates: true,\n                })\n            );\n        }\n\n        if (modalVisible) {\n            focusTrap.activate && focusTrap.activate();\n            disableBodyScroll(getModal());\n        } else {\n            focusTrap.deactivate && focusTrap.deactivate();\n            enableBodyScroll(getModal());\n        }\n    }, [modalVisible]);\n    // End focus trap\n\n    // Render the 'Apply now' CTA which launches the modal\n    return (\n        <>\n            <ul className=\"cta-block\">\n                <li className=\"cta-block__cta\">\n                    <button\n                        className=\"primary-cta-arrow--bright\"\n                        onClick={() => {\n                            setModalVisible(true);\n                            setFirstStep(true); // Don't show 'Start again' option on initial modal load\n                            clearSelectionOptions(); // Clear any previously rendered selection buttons/links from the state\n                            filterQualificationData(entryPoints);\n                        }}\n                    >\n                        <span>Apply now</span>\n                    </button>\n                </li>\n            </ul>\n            <div\n                className=\"how-to-apply--pgt--js__modal\"\n                data-open={modalVisible}\n                ref={(modal) => (modalRef = modal)}\n            >\n                <div\n                    className=\"how-to-apply--pgt--js__modal__content\"\n                    ref={(modalContent) => (modalContentRef = modalContent)}\n                >\n                    <button\n                        className=\"how-to-apply--pgt--js__close\"\n                        onClick={() => {\n                            focusTrap.deactivate && focusTrap.deactivate();\n                            enableBodyScroll(getModal());\n                            setModalVisible(false);\n                        }}\n                    >\n                        <span\n                            className=\"fas fa-times icon\"\n                            aria-label=\"Close\"\n                        ></span>\n                    </button>\n\n                    {/* Display 'Start again' reset if user is not in the modal's first selection screen */}\n                    {!firstStep ? (\n                        <div\n                            className=\"how-to-apply--pgt--js__modal__reset\"\n                            // style={{ display: 'block' }}\n                        >\n                            <button\n                                onClick={() => {\n                                    // Clear options display and render what user would see when modal is first opened\n                                    setFirstStep(true);\n                                    filterQualificationData(entryPoints);\n                                }}\n                            >\n                                <span className=\"fas fa-redo\"></span>{' '}\n                                <span>Start again</span>\n                            </button>\n                        </div>\n                    ) : null}\n                    <ol className=\"how-to-apply--pgt--js__modal__progress\">\n                        {progressQualification}\n                        {progressRoute}\n                        {progressDate}\n                        {progressMethod}\n                        {furtherStepsPendingIndicator}\n                    </ol>\n                    <div className=\"how-to-apply--pgt--js__modal__content-wrapper\">\n                        <h2>Start in {props.element.dataset.year}</h2>\n                    </div>\n                    {qualificationQuestion}\n                    <div className=\"how-to-apply--pgt--js__modal__content-wrapper\">\n                        {alternative}\n                    </div>\n                </div>\n            </div>\n        </>\n    );\n}\n\nHowToApply.propTypes = {\n    config: PropTypes.array,\n    element: PropTypes.object,\n};\n\nexport default HowToApply;\n","/**\n * Functions to retrieve how to apply configuration.\n *\n * @module pgt-data\n * @author Web Development\n * @copyright City, University of London 2020\n */\n\nimport { axiosRequest } from '../../util.js';\n\nconst timeout = 30000;\n\n/**\n * How to apply configuration.\n *\n * @param {string} url The HTA configuration file.\n * @return {Promise} - A promise of  configuration object.\n */\nexport function howToApplyConfig(url) {\n    const config = {\n        timeout: timeout,\n        url: url,\n    };\n\n    return axiosRequest(config);\n}\n","/**\n * How to apply PGT entry\n *\n * @author Web Development\n * @copyright City, University of London 2020\n */\nimport React from 'react';\nimport { render } from 'react-dom';\nimport HowToApply from './patterns/how-to-apply/how-to-apply--pgt';\nimport { howToApplyConfig } from './patterns/how-to-apply/pgt-data';\nimport edn from 'edn-to-js';\n\ndocument.addEventListener('DOMContentLoaded', () => {\n    if (/(Trident|MSIE)/.test(navigator.userAgent)) {\n        return;\n    } else {\n        const howToApplyCTAs = document.querySelectorAll(\n            '.how-to-apply--pgt--js'\n        );\n        howToApplyCTAs &&\n            Array.from(howToApplyCTAs).forEach(howToApply => {\n                howToApplyConfig(howToApply.dataset.config).then(config => {\n                    render(\n                        <HowToApply\n                            config={edn(config)}\n                            element={howToApply}\n                        />,\n                        howToApply\n                    );\n                });\n            });\n    }\n});\n"],"sourceRoot":""}